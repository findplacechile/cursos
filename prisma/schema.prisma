// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastName      String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?

  roleId Int?
  role   UserRole? @relation(fields: [roleId], references: [id])

  accounts Account[]
  sessions Session[]
  Course   Course[]
  Purchase Purchase[]

  @@map("Users")
}

model Course {
  id                Int                 @id @default(autoincrement())
  name              String
  categoryId        Int
  description       String?
  price             Float?
  teacherId         String?
  feature_image     String
  requirements      String[]
  teacher           User?               @relation(fields: [teacherId], references: [id])
  coursesModules    CoursesModules[]
  coursesObjectives CoursesObjectives[]
  Purchase          Purchase[]
  categories        Categorie           @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("courses")
}

model Module {
  id             Int              @id @default(autoincrement())
  name           String
  price          Float?
  coursesModules CoursesModules[]
  modulesLessons  ModulesLessons[]
  Purchase       Purchase[]

  @@map("modules")
}

model Lesson {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  price            Float?
  url              String
  modulesLessons    ModulesLessons[]
  lessonsCategories LessonsCategories[]
  Purchase         Purchase[]

  @@map("lessons")
}

model Categorie {
  id               Int                @id @default(autoincrement())
  name             String
  lessonsCategories LessonsCategories[]
  Course           Course[]

  @@map("categories")
}

model Objective {
  id                Int                 @id @default(autoincrement())
  name              String
  coursesObjectives CoursesObjectives[]

  @@map("objectives")
}

model CoursesObjectives {
  id          Int       @id @default(autoincrement())
  courseId    Int
  objectiveId Int
  courses     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  objectives  Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@map("courses_objectives")
}

model CoursesModules {
  id       Int    @id @default(autoincrement())
  courseId Int
  moduleId Int
  courses  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  modules  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("courses_modules")
}

model ModulesLessons {
  id       Int    @id @default(autoincrement())
  moduleId Int
  lessonId  Int
  modules  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessons   Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("modules_lessons")
}

model LessonsCategories {
  id         Int       @id @default(autoincrement())
  lessonId    Int
  categoryId Int
  lessons     Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  categories Categorie @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("lessons_categories")
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    String
  classId   Int?
  moduleId  Int?
  courseId  Int?
  createdAt DateTime @default(now())
  status    String   @default("pending")
  // Puedes agregar más campos según tus necesidades, como información de pago, número de transacción, etc.

  user            User    @relation(fields: [userId], references: [id])
  purchasedClass  Lesson?  @relation(fields: [classId], references: [id])
  purchasedModule Module? @relation(fields: [moduleId], references: [id])
  purchasedCourse Course? @relation(fields: [courseId], references: [id])

  @@map("purchase")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserRole {
  id   Int    @id @default(autoincrement())
  name String @unique

  user User[]
}
