// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?

    roleId Int?
    role   UserRole? @relation(fields: [roleId], references: [id])

    accounts Account[]
    sessions Session[]

    @@map("Users")
}

model Course {
  id      Int              @id @default(autoincrement())
  name    String
  description   String?
  requirements String?
  coursesModules CoursesModules[]
  coursesObjectives CoursesObjectives[]

  @@map("courses")
}

model Module {
  id      Int              @id @default(autoincrement())
  name    String
  coursesModules CoursesModules[]
  modulesClases  ModulesClases[]

  @@map("modules")
}

model Clase {
  id               Int                @id @default(autoincrement())
  name             String
  url              String
  modulesClases          ModulesClases[]
  clasesCategories ClasesCategories[]

  @@map("clases")
}

model Categorie {
  id               Int                @id @default(autoincrement())
  name             String
  clasesCategories ClasesCategories[]

  @@map("categories")
}

model Objective {
  id               Int                @id @default(autoincrement())
  name             String
  coursesObjectives CoursesObjectives[]

  @@map("objectives")
}

model CoursesObjectives {
  id       Int     @id @default(autoincrement())
  courseId Int
  objectiveId Int
  courses  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  objectives  Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@map("courses_objectives")
}

model CoursesModules {
  id       Int     @id @default(autoincrement())
  courseId Int
  moduleId Int
  courses  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  modules  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("courses_modules")
}

model ModulesClases {
  id       Int     @id @default(autoincrement())
  moduleId Int
  claseId  Int
  modules  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  clases   Clase  @relation(fields: [claseId], references: [id], onDelete: Cascade)

  @@map("modules_clases")
}

model ClasesCategories {
  id         Int        @id @default(autoincrement())
  claseId    Int
  categoryId Int
  clases     Clase     @relation(fields: [claseId], references: [id], onDelete: Cascade)
  categories Categorie @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("clases_categories")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserRole {
    id   Int    @id @default(autoincrement())
    name String @unique

    user User[]
}
